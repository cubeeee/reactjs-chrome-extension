({3441:function(){var e=this&&this.__awaiter||function(e,o,t,r){return new(t||(t=Promise))((function(n,a){function s(e){try{i(r.next(e))}catch(e){a(e)}}function c(e){try{i(r.throw(e))}catch(e){a(e)}}function i(e){var o;e.done?n(e.value):(o=e.value,o instanceof t?o:new t((function(e){e(o)}))).then(s,c)}i((r=r.apply(e,o||[])).next())}))};const o="https://api.netproxy.io/api/rotateProxy";let t=null,r="all",n="all";const a=(o,t,r)=>e(this,void 0,void 0,(function*(){chrome.runtime.sendMessage({command:o,message:t,config:r},(function(e){}))})),s=e=>{chrome.alarms.clear(e)};s("refreshPage");const c=o=>e(this,void 0,void 0,(function*(){const e=o.data.proxy,[t,r]=(o.data.newTab,e.split(":"));if(!t||!r)return void a("getProxyFailed",{error:"Thông tin proxy không hợp lệ!"},{});const n={mode:"fixed_servers",rules:{singleProxy:{scheme:"http",host:t,port:parseInt(r)},bypassList:["*netproxy.io, localhost ,127.0.0.1"]}};p(n)})),i=e=>new Promise(((o,t)=>{setTimeout(o,e)}));let l=!1,d=null;const u=t=>e(this,void 0,void 0,(function*(){try{const{timeRefresh:s,apiKey:u,country:h,type:p,isAutoRefresh:y,isConnected:g}=t.data;if(r=h,n=p,d&&(console.log("Stopping current worker..."),l=!0,yield d,d=null),l=!1,!y&&!g)return void a("autoChangeIpFailed",{error:"Auto-change proxy is disabled."},{});if(y&&s>0){let t=s;d=(()=>e(this,void 0,void 0,(function*(){for(;!l;){if(yield i(1e3),0===t){const e=new URL(`${o}/getNewProxy`),r={apiKey:u,country:"all"===h?void 0:h,type:"all"===p?void 0:p};Object.keys(r).forEach((o=>r[o]&&e.searchParams.append(o,r[o])));const n=yield fetch(e.toString(),{method:"GET"}),a=yield n.json();a&&(console.log("New proxy:",a),c(a),chrome.runtime.sendMessage({type:"proxy_autoChangeIp_result",data:a}),t=s)}t--,chrome.runtime.sendMessage({type:"proxy_autoChangeIp_countdown",data:t})}console.log("Worker stopped.")})))(),d.catch((e=>{console.error("Worker error:",e)}))}else l=!0,d=null,console.log("Auto-change proxy stopped.")}catch(e){console.error("Error when startThreadAutoChangeProxy:",e)}})),h=()=>{l=!0,d&&(console.log("Stopping worker..."),d=null)};chrome.alarms.onAlarm.addListener((function(o){return e(this,void 0,void 0,(function*(){o.name}))})),chrome.runtime.onMessage.addListener(((o,r,n)=>e(this,void 0,void 0,(function*(){switch(o.type){case"proxy_connect":y(),c(o);break;case"proxy_change":c(o);break;case"proxy_disconnect":s("flagLoop"),s("refreshPage"),chrome.proxy.settings.set({value:{mode:"direct"},scope:"regular"},(()=>{console.log("Proxy has been reset to direct connection.")})),y(),h();break;case"proxy_autoChangeIp":u(o);break;case"proxy_stopAutoChangeIp":h();break;case"setApiKey":t=o.data.apiKey;break;default:console.error("do nothing with this request")}}))));const p=e=>{chrome.action.setBadgeBackgroundColor({color:"#D6EBDC"}),chrome.action.setBadgeText({text:"ON"}),chrome.action.setBadgeTextColor({color:"#28c76f"}),chrome.proxy.settings.set({value:e,scope:"regular"})},y=()=>{chrome.action.setBadgeBackgroundColor({color:[162,36,36,255]}),chrome.action.setBadgeText({text:""}),chrome.proxy.settings.set({value:{mode:"direct"},scope:"regular"}),chrome.storage.sync.set({tx_proxy:null})},g=()=>e(this,void 0,void 0,(function*(){const e=new URL(`${o}/getNewProxy`);console.log("apikey",t);let a=null;const s={apiKey:t,country:r,type:n};Object.keys(s).forEach((o=>s[o]&&e.searchParams.append(o,s[o])));let l=!1;for(;!l;){try{const o=yield fetch(e.toString(),{method:"GET"}),t=yield o.json();t&&t.data&&t.data.proxy?(console.log("New proxy fetched:",t.data.proxy),yield c(t),l=!0,a=t.data):console.error("Failed to fetch new proxy: Invalid response format")}catch(e){console.error("Error fetching new proxy, retrying...",e)}l||(yield i(1e4))}return a}));let f=null,m=null;(()=>{e(this,void 0,void 0,(function*(){const e=yield g();e&&(f=e.username,m=e.password)}))})(),chrome.webRequest.onAuthRequired.addListener((function(e){return f&&m?(console.log("Using cached credentials for proxy authentication..."),{authCredentials:{username:f,password:m}}):(console.error("No cached credentials found. Please re-fetch proxy credentials."),{cancel:!0})}),{urls:["<all_urls>"]},["blocking"]),chrome.webRequest.onErrorOccurred.addListener((function(o){return e(this,void 0,void 0,(function*(){"net::ERR_PROXY_CONNECTION_FAILED"===o.error&&(console.log("Proxy connection failed, fetching a new proxy..."),g())}))}),{urls:["<all_urls>"]})}})[3441]();
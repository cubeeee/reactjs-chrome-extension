({3441:function(){var e=this&&this.__awaiter||function(e,o,r,t){return new(r||(r=Promise))((function(n,c){function s(e){try{i(t.next(e))}catch(e){c(e)}}function a(e){try{i(t.throw(e))}catch(e){c(e)}}function i(e){var o;e.done?n(e.value):(o=e.value,o instanceof r?o:new r((function(e){e(o)}))).then(s,a)}i((t=t.apply(e,o||[])).next())}))};const o="https://api.netproxy.io/api/rotateProxy";let r=null,t="all",n="all";const c=(o,r,t)=>e(this,void 0,void 0,(function*(){chrome.runtime.sendMessage({command:o,message:r,config:t},(function(e){}))})),s=e=>{chrome.alarms.clear(e)};s("refreshPage");const a=o=>e(this,void 0,void 0,(function*(){const e=o.data.proxy,[r,t]=(o.data.newTab,e.split(":"));if(!r||!t)return void c("getProxyFailed",{error:"Thông tin proxy không hợp lệ!"},{});const n={mode:"fixed_servers",rules:{singleProxy:{scheme:"http",host:r,port:parseInt(t)},bypassList:["*netproxy.io, localhost ,127.0.0.1"]}};console.log("config",n),y(n)})),i=e=>new Promise(((o,r)=>{setTimeout(o,e)}));let l=!1,d=null;const u=r=>e(this,void 0,void 0,(function*(){try{const{timeRefresh:s,apiKey:u,country:h,type:y,isAutoRefresh:p,isConnected:g}=r.data;if(t=h,n=y,d&&(console.log("Stopping current worker..."),l=!0,yield d,d=null),l=!1,!p&&!g)return void c("autoChangeIpFailed",{error:"Auto-change proxy is disabled."},{});if(p&&s>0){let r=s;d=(()=>e(this,void 0,void 0,(function*(){for(;!l;){if(yield i(1e3),0===r){const e=new URL(`${o}/getNewProxy`),t={apiKey:u,country:"all"===h?void 0:h,type:"all"===y?void 0:y};Object.keys(t).forEach((o=>t[o]&&e.searchParams.append(o,t[o])));const n=yield fetch(e.toString(),{method:"GET"}),c=yield n.json();c&&(console.log("New proxy:",c),a(c),chrome.runtime.sendMessage({type:"proxy_autoChangeIp_result",data:c}),r=s)}r--,chrome.runtime.sendMessage({type:"proxy_autoChangeIp_countdown",data:r})}console.log("Worker stopped.")})))(),d.catch((e=>{console.error("Worker error:",e)}))}else l=!0,d=null,console.log("Auto-change proxy stopped.")}catch(e){console.error("Error when startThreadAutoChangeProxy:",e)}})),h=()=>{l=!0,d&&(console.log("Stopping worker..."),d=null)};chrome.alarms.onAlarm.addListener((function(o){return e(this,void 0,void 0,(function*(){o.name}))})),chrome.runtime.onMessage.addListener(((o,t,n)=>e(this,void 0,void 0,(function*(){switch(o.type){case"proxy_connect":p(),a(o);break;case"proxy_change":a(o);break;case"proxy_disconnect":s("flagLoop"),s("refreshPage"),chrome.proxy.settings.set({value:{mode:"direct"},scope:"regular"},(()=>{console.log("Proxy has been reset to direct connection.")})),p(),h();break;case"proxy_autoChangeIp":u(o);break;case"proxy_stopAutoChangeIp":h();break;case"setApiKey":r=o.data.apiKey;break;default:console.error("do nothing with this request")}}))));const y=e=>{chrome.action.setBadgeBackgroundColor({color:"#D6EBDC"}),chrome.action.setBadgeText({text:"ON"}),chrome.action.setBadgeTextColor({color:"#28c76f"}),chrome.proxy.settings.set({value:e,scope:"regular"})},p=()=>{chrome.action.setBadgeBackgroundColor({color:[162,36,36,255]}),chrome.action.setBadgeText({text:""}),chrome.proxy.settings.set({value:{mode:"direct"},scope:"regular"}),chrome.storage.sync.set({tx_proxy:null})},g=()=>e(this,void 0,void 0,(function*(){return new Promise(((e,o)=>{chrome.storage.local.get("apiKey",(r=>{console.log("result",r),chrome.runtime.lastError?o(chrome.runtime.lastError):(console.log("Fetched API Key:",r.apiKey),e(r.apiKey))}))}))})),m=()=>e(this,void 0,void 0,(function*(){return new Promise(((e,o)=>{chrome.storage.local.get("location",(r=>{console.log("result",r),chrome.runtime.lastError?o(chrome.runtime.lastError):(console.log("Fetched Location:",r.location),e(r.location))}))}))})),f=()=>e(this,void 0,void 0,(function*(){return new Promise(((e,o)=>{chrome.storage.local.get("type",(r=>{console.log("result",r),chrome.runtime.lastError?o(chrome.runtime.lastError):(console.log("Fetched type:",r.type),e(r.type))}))}))})),x=()=>e(this,void 0,void 0,(function*(){const e=new URL(`${o}/getNewProxy`),c=yield g(),s=yield m(),l=yield f();let d=null;const u={apiKey:c||r,country:s||t,type:l||n};Object.keys(u).forEach((o=>u[o]&&e.searchParams.append(o,u[o])));let h=!1;for(;!h;){try{const o=yield fetch(e.toString(),{method:"GET"}),r=yield o.json();r&&r.data&&r.data.proxy?(console.log("New proxy fetched:",r.data.proxy),yield a(r),h=!0,d=r.data):console.error("Failed to fetch new proxy: Invalid response format")}catch(e){console.error("Error fetching new proxy, retrying...",e)}h||(yield i(1e4))}return d})),v=()=>e(this,void 0,void 0,(function*(){const e=new URL(`${o}/getCurrentProxy`);let t=null;const n={apiKey:(yield g())||r};Object.keys(n).forEach((o=>n[o]&&e.searchParams.append(o,n[o])));let c=!1;for(;!c;){try{const o=yield fetch(e.toString(),{method:"GET"}),r=yield o.json();r&&r.data&&r.data.proxy?(console.log("Current proxy fetched:",r.data.proxy),c=!0,t=r.data):console.error("Failed to fetch current proxy: Invalid response format")}catch(e){console.error("Error fetching current proxy, retrying...",e)}c||(yield i(1e4))}return t})),w=()=>e(this,void 0,void 0,(function*(){const e=yield v();return{username:e.username,password:e.password}}));w(),chrome.webRequest.onAuthRequired.addListener((function(o){return e(this,void 0,void 0,(function*(){const{username:e,password:o}=yield w();return e&&o?(console.log("Using cached credentials for proxy authentication..."),{authCredentials:{username:e,password:o}}):(console.error("No cached credentials found. Please re-fetch proxy credentials."),{cancel:!0})}))}),{urls:["<all_urls>"]},["blocking"]),chrome.webRequest.onErrorOccurred.addListener((function(o){return e(this,void 0,void 0,(function*(){"net::ERR_PROXY_CONNECTION_FAILED"===o.error&&(console.log("Proxy connection failed, fetching a new proxy..."),yield x())}))}),{urls:["<all_urls>"]})}})[3441]();